\begin{comment}
\begin{code}
{-# OPTIONS --without-K #-}
module July2024.SILInterface where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat
   using (‚Ñï; zero; suc; _‚â§_; _<_; _+_; _‚à∏_; z‚â§n; s‚â§s; _‚â§‚Ä≤_; ‚â§‚Ä≤-step)
open import Data.Nat.Properties
   using (‚â§-refl; ‚â§-antisym; ‚â§-trans; ‚â§-step; ‚â§‚áí‚â§‚Ä≤; ‚â§‚Ä≤‚áí‚â§; n‚â§1+n; <‚áí‚â§; s‚â§‚Ä≤s)
open import Data.Product
   using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit using (tt; ‚ä§)
open import Data.Unit.Polymorphic renaming (‚ä§ to top·µñ; tt to tt·µñ)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; trans; cong; cong‚ÇÇ; cong-app; subst)
open import Relation.Nullary using (¬¨_)
open import Function using (id; _‚àò_)
open import Level using (Lift)
open import EquivalenceRelation public

\end{code}
\end{comment}

\noindent Let $A,B,C$ range over Agda types (element of \textsf{Set})

\begin{code}
variable A B C : Set
\end{code}

\begin{code}
Context : Set‚ÇÅ
Context = List Set
variable Œì : Context
\end{code}

\noindent The following data type defines well-typed de Bruijn indices.

\begin{code}
data _‚àã_ : Context ‚Üí Set ‚Üí Set‚ÇÅ where
  zeroÀ¢ : (A ‚à∑ Œì) ‚àã A
  sucÀ¢ : Œì ‚àã B ‚Üí (A ‚à∑ Œì) ‚àã B
variable x y z : Œì ‚àã A
\end{code}

\begin{code}
data Time : Set where
  Now : Time
  Later : Time

data Times : Context ‚Üí Set‚ÇÅ where
  ‚àÖ : Times []
  cons : Time ‚Üí Times Œì ‚Üí Times (A ‚à∑ Œì)
\end{code}
Let $Œî$ range over these lists of times.
\begin{code}
variable Œî Œî‚ÇÅ Œî‚ÇÇ : Times Œì
\end{code}

\begin{code}
laters : ‚àÄ (Œì : Context) ‚Üí Times Œì
laters [] = ‚àÖ
laters (A ‚à∑ Œì) = cons Later (laters Œì)

var-now : ‚àÄ (Œì : Context) ‚Üí ‚àÄ{A} ‚Üí (x : Œì ‚àã A) ‚Üí Times Œì
var-now (B ‚à∑ Œì) zeroÀ¢ = cons Now (laters Œì)
var-now (B ‚à∑ Œì) (sucÀ¢ x) = cons Later (var-now Œì x)
\end{code}

\begin{code}
choose : Time ‚Üí Time ‚Üí Time
choose Now Now = Now
choose Now Later = Now
choose Later Now = Now
choose Later Later = Later
\end{code}

\begin{code}
_‚à™_ : ‚àÄ{Œì} (Œî‚ÇÅ Œî‚ÇÇ : Times Œì) ‚Üí Times Œì
_‚à™_ {[]} Œî‚ÇÅ Œî‚ÇÇ = ‚àÖ
_‚à™_ {A ‚à∑ Œì} (cons x Œî‚ÇÅ) (cons y Œî‚ÇÇ) = cons (choose x y) (Œî‚ÇÅ ‚à™ Œî‚ÇÇ)
\end{code}

\begin{code}
record Inhabited (A : Set) : Set where
  field elt : A
open Inhabited {{...}} public
\end{code}

\begin{code}
record SIL·µí : Set‚ÇÇ where
  field
    {- Step-Indexed Propositions -}
    Set·µí : Set‚ÇÅ
    # : Set·µí ‚Üí ‚Ñï ‚Üí Set

  Pred·µí : Set ‚Üí Set‚ÇÅ
  Pred·µí A = A ‚Üí Set·µí

  RecEnv : Context ‚Üí Set‚ÇÅ
  RecEnv [] = top·µñ 
  RecEnv (A ‚à∑ Œì) = Pred·µí A √ó RecEnv Œì
\end{code}

\begin{code}
record SIL : Set‚ÇÇ where
  infix 1 _‚ä¢·µí_
  infix 2 _‚â°·µí_
  infix 2 _‚â°À¢_

  field S : SIL·µí
  open SIL·µí S
  
  field
    {- Open Step-Indexed Propositions -}
    SetÀ¢ : (Œì : Context) ‚Üí Times Œì ‚Üí Set‚ÇÅ
    ‚ôØ : ‚àÄ{Œì Œî} ‚Üí SetÀ¢ Œì Œî ‚Üí RecEnv Œì ‚Üí Set·µí

  field
    {- Formulas -}
    ‚ä§·µí : Set·µí
    ‚ä•·µí : Set·µí
    ‚ñ∑·µí_ : Set·µí ‚Üí Set·µí
    _√ó·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
    _‚äé·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
    _‚Üí·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set·µí
    ‚àÄ·µí : (A ‚Üí Set·µí) ‚Üí Set·µí
    ‚àÉ·µí : (A ‚Üí Set·µí) ‚Üí Set·µí
    ‚Üì·µí : ‚Ñï ‚Üí Set·µí ‚Üí Set·µí
    _·µí : Set ‚Üí Set·µí
    Œº·µí : (A ‚Üí SetÀ¢ (A ‚à∑ []) (cons Later ‚àÖ)) ‚Üí (A ‚Üí Set·µí)
    _‚â°·µí_ : Set·µí ‚Üí Set·µí ‚Üí Set

    {- Proof Theory -}
    _‚ä¢·µí_ : List Set·µí ‚Üí Set·µí ‚Üí Set
    mono·µí : ‚àÄ{ùí´ œï} ‚Üí ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí (‚ñ∑·µí œï)
    lob·µí : ‚àÄ{ùí´ œï} ‚Üí (‚ñ∑·µí œï) ‚à∑ ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œï
    ‚ñ∑√ó : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí (‚ñ∑·µí (œï √ó·µí œà))  ‚Üí  ùí´ ‚ä¢·µí (‚ñ∑·µí œï) √ó·µí (‚ñ∑·µí œà)
    ‚ñ∑‚äé : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí (‚ñ∑·µí (œï ‚äé·µí œà))  ‚Üí  ùí´ ‚ä¢·µí (‚ñ∑·µí œï) ‚äé·µí (‚ñ∑·µí œà)
    ‚ñ∑‚Üí : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí (‚ñ∑·µí (œï ‚Üí·µí œà))  ‚Üí  ùí´ ‚ä¢·µí (‚ñ∑·µí œï) ‚Üí·µí (‚ñ∑·µí œà)
    ‚ñ∑‚àÄ : ‚àÄ{ùí´}{œï·µÉ : A ‚Üí Set·µí} ‚Üí ùí´ ‚ä¢·µí ‚ñ∑·µí (‚àÄ·µí œï·µÉ)  ‚Üí  ùí´ ‚ä¢·µí (‚àÄ·µí (Œª a ‚Üí ‚ñ∑·µí (œï·µÉ a)))
    subst·µí : ‚àÄ{ùí´ œï œà} ‚Üí œï ‚â°·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œà
    tt·µí : ‚àÄ{ùí´} ‚Üí ùí´ ‚ä¢·µí ‚ä§·µí
    ‚ä•-elim·µí : ‚àÄ{ùí´} ‚Üí ùí´ ‚ä¢·µí ‚ä•·µí ‚Üí (œï : Set·µí) ‚Üí ùí´ ‚ä¢·µí œï
    _,·µí_ : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï √ó·µí œà
    proj‚ÇÅ·µí : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œï √ó·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï
    proj‚ÇÇ·µí : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œï √ó·µí œà  ‚Üí  ùí´ ‚ä¢·µí œà
    inj‚ÇÅ·µí : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œï ‚Üí ùí´ ‚ä¢·µí œï ‚äé·µí œà
    inj‚ÇÇ·µí : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œà ‚Üí ùí´ ‚ä¢·µí œï ‚äé·µí œà
    case·µí : ‚àÄ{ùí´ œï œà √æ} ‚Üí ùí´ ‚ä¢·µí œï ‚äé·µí œà  ‚Üí  œï ‚à∑ ùí´ ‚ä¢·µí √æ  ‚Üí  œà ‚à∑ ùí´ ‚ä¢·µí √æ  ‚Üí  ùí´ ‚ä¢·µí √æ
    ‚Üí·µíI : ‚àÄ{ùí´ œï œà} ‚Üí œï ‚à∑ ùí´ ‚ä¢·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï ‚Üí·µí œà
    app·µí : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œï ‚Üí·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œà
    ‚ä¢·µí-‚àÄ-intro : ‚àÄ{ùí´}{œï·µÉ : A ‚Üí Set·µí} ‚Üí (‚àÄ a ‚Üí ùí´ ‚ä¢·µí œï·µÉ a)  ‚Üí  ùí´ ‚ä¢·µí ‚àÄ·µí œï·µÉ
    inst·µí : ‚àÄ{ùí´}{œï·µÉ : A ‚Üí Set·µí} ‚Üí ùí´ ‚ä¢·µí ‚àÄ·µí œï·µÉ  ‚Üí  (a : A)  ‚Üí  ùí´ ‚ä¢·µí œï·µÉ a
    ‚ä¢·µí-‚àÉ-intro : ‚àÄ{ùí´}{œï·µÉ : A ‚Üí Set·µí}{{_ : Inhabited A}} ‚Üí (a : A)  ‚Üí  ùí´ ‚ä¢·µí œï·µÉ a  ‚Üí  ùí´ ‚ä¢·µí ‚àÉ·µí œï·µÉ
    ‚ä¢·µí-‚àÉ-elim : ‚àÄ{ùí´}{œï·µÉ : A ‚Üí Set·µí}{√æ : Set·µí}{{_ : Inhabited A}}
       ‚Üí ùí´ ‚ä¢·µí ‚àÉ·µí œï·µÉ  ‚Üí  (‚àÄ a ‚Üí œï·µÉ a ‚à∑ ùí´ ‚ä¢·µí √æ)  ‚Üí  ùí´ ‚ä¢·µí √æ
    const·µíI : ‚àÄ{ùí´}{p : Set} ‚Üí p ‚Üí ùí´ ‚ä¢·µí p ·µí
    const·µíE : ‚àÄ{ùí´ √æ}{p : Set} ‚Üí ùí´ ‚ä¢·µí p ·µí  ‚Üí  (p ‚Üí ùí´ ‚ä¢·µí √æ)  ‚Üí  ùí´ ‚ä¢·µí √æ
    Z·µí : ‚àÄ{ùí´ œï} ‚Üí œï ‚à∑ ùí´ ‚ä¢·µí œï
    S·µí : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œà  ‚Üí  œï ‚à∑ ùí´ ‚ä¢·µí œà
    ‚ä¢·µí-sucP : ‚àÄ{ùí´ œï œà} ‚Üí ùí´ ‚ä¢·µí œï  ‚Üí  (‚àÄ{n} ‚Üí # œï (suc n) ‚Üí ùí´ ‚ä¢·µí œà)  ‚Üí  ùí´ ‚ä¢·µí œà
    fixpoint·µí : ‚àÄ{A} (P : A ‚Üí SetÀ¢ (A ‚à∑ []) (cons Later ‚àÖ)) (a : A) ‚Üí Œº·µí P a ‚â°·µí ‚ôØ (P a) (Œº·µí P , tt·µñ)

    {- Open Formulas -}
    ‚ä§À¢ : SetÀ¢ Œì (laters Œì)
    ‚ä•À¢ : SetÀ¢ Œì (laters Œì)
    _‚àà_ : A ‚Üí (x : Œì ‚àã A) ‚Üí SetÀ¢ Œì (var-now Œì x)
    ‚ñ∑À¢ : SetÀ¢ Œì Œî ‚Üí SetÀ¢ Œì (laters Œì)
    ‚ÜìÀ¢ : ‚Ñï ‚Üí SetÀ¢ Œì Œî ‚Üí SetÀ¢ Œì Œî
    letÀ¢ : (A ‚Üí SetÀ¢ Œì Œî) ‚Üí SetÀ¢ (A ‚à∑ Œì) (cons Later Œî) ‚Üí SetÀ¢ Œì Œî   
    ŒºÀ¢ : (A ‚Üí SetÀ¢ (A ‚à∑ Œì) (cons Later Œî)) ‚Üí (A ‚Üí SetÀ¢ Œì Œî)
    _‚ÜíÀ¢_ : SetÀ¢ Œì Œî‚ÇÅ ‚Üí SetÀ¢ Œì Œî‚ÇÇ ‚Üí SetÀ¢ Œì (Œî‚ÇÅ ‚à™ Œî‚ÇÇ)
    _√óÀ¢_ : SetÀ¢ Œì Œî‚ÇÅ ‚Üí SetÀ¢ Œì Œî‚ÇÇ ‚Üí SetÀ¢ Œì (Œî‚ÇÅ ‚à™ Œî‚ÇÇ)
    _‚äéÀ¢_ : SetÀ¢ Œì Œî‚ÇÅ ‚Üí SetÀ¢ Œì Œî‚ÇÇ ‚Üí SetÀ¢ Œì (Œî‚ÇÅ ‚à™ Œî‚ÇÇ)
    ‚àÄÀ¢ : (A ‚Üí SetÀ¢ Œì Œî) ‚Üí SetÀ¢ Œì Œî
    ‚àÉÀ¢ : {{_ : Inhabited A}} ‚Üí (A ‚Üí SetÀ¢ Œì Œî) ‚Üí SetÀ¢ Œì Œî
    _À¢ : Set ‚Üí SetÀ¢ Œì (laters Œì)

    _‚â°À¢_ : SetÀ¢ Œì Œî ‚Üí SetÀ¢ Œì Œî ‚Üí Set‚ÇÅ
    fixpointÀ¢ : ‚àÄ (F : A ‚Üí SetÀ¢ (A ‚à∑ Œì) (cons Later Œî)) (a : A) ‚Üí ŒºÀ¢ F a ‚â°À¢ letÀ¢ (ŒºÀ¢ F) (F a)
\end{code}
