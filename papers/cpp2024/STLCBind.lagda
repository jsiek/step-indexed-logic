\begin{comment}
\begin{code}
{-# OPTIONS --rewriting #-}

module cpp2024.STLCBind where

open import Data.List using (List; []; _Рѕи_; length)
open import Data.Nat
open import Data.Nat.Induction
open import Data.Bool using (true; false) renaming (Bool to ­Юћ╣)
open import Data.List using (map)
open import Data.Nat.Properties
open import Data.Product using (_,_;_├Ќ_; projРѓЂ; projРѓѓ; ╬Б-syntax; РѕЃ-syntax)
--open import Data.Unit.Polymorphic using (Ріц; tt)
open import Data.Unit using (Ріц; tt)
open import Data.Unit.Polymorphic renaming (Ріц to topрхќ; tt to ttрхќ)
open import Data.Vec using (Vec) renaming ([] to []╠ї; _Рѕи_ to _Рѕи╠ї_)
open import Data.Empty using (РіЦ; РіЦ-elim)
open import Data.Sum using (_Ріј_; injРѓЂ; injРѓѓ)
open import Induction using (RecStruct)
open import Induction.WellFounded as WF
open import Data.Product.Relation.Binary.Lex.Strict
  using (├Ќ-Lex; ├Ќ-wellFounded; ├Ќ-preorder)
open import Relation.Binary using (Rel)
open import Relation.Binary.PropositionalEquality as Eq
  using (_РЅА_; _РЅб_; refl; sym; cong; congРѓѓ; subst; trans)
--open Eq.РЅА-Reasoning
open import Relation.Nullary using (┬г_; Dec; yes; no)
open import Sig
open import Var
open import cpp2024.StepIndexedLogic
open import cpp2024.STLC
open import cpp2024.STLCDeterministic

\end{code}
\end{comment}

\subsection{Bind Lemma}

\begin{code}
­Юњ▒VРєњРё░F[V] : Type Рєњ Type Рєњ Frame Рєњ Term Рєњ Setрхњ
­Юњ▒VРєњРё░F[V] A B F M = Рѕђрхњ[ V ] (M РђћРєа V)рхњ Рєњрхњ ­Юњ▒РЪд B РЪД V Рєњрхњ Рё░РЪд A РЪД (F РЪд V РЪД)

Рё░-bind-M : Type Рєњ Type Рєњ Frame Рєњ Term Рєњ Setрхњ
Рё░-bind-M A B F M = Рё░РЪд B РЪД M Рєњрхњ ­Юњ▒VРєњРё░F[V] A B F M Рєњрхњ Рё░РЪд A РЪД (F РЪд M РЪД)

Рё░-bind-prop : Type Рєњ Type Рєњ Frame Рєњ Setрхњ
Рё░-bind-prop A B F = Рѕђрхњ[ M ] Рё░-bind-M A B F M

­Юњ▒VРєњРё░F[V]-expansion : Рѕђ{­ЮњФ}{A}{B}{F}{M}{MРђ▓}
   Рєњ M РђћРєњ MРђ▓
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒VРєњРё░F[V] A B F M
     -----------------------
   Рєњ ­ЮњФ Рібрхњ ­Юњ▒VРєњРё░F[V] A B F MРђ▓
­Юњ▒VРєњРё░F[V]-expansion {­ЮњФ}{A}{B}{F}{M}{MРђ▓} MРєњMРђ▓ ­Юњ▒VРєњРё░F[V][M] =
   ╬Џрхњ[ V ]
    let MРђ▓РєњVРєњРё░FV : ­Юњ▒РЪд B РЪД V Рѕи (MРђ▓ РђћРєа V)рхњ Рѕи ­ЮњФ Рібрхњ Рё░РЪд A РЪД (F РЪд V РЪД)
        MРђ▓РєњVРєњРё░FV = Рібрхњ-sucP (Sрхњ Zрхњ) ╬╗ MРђ▓РєњV Рєњ 
                     let MРђћРєаV = constрхњI (M РђћРєњРЪе MРєњMРђ▓ РЪЕ MРђ▓РєњV) in
                     let MРєњVРєњРё░FV = Sрхњ(Sрхњ(instрхњ ­Юњ▒VРєњРё░F[V][M] V)) in
                     appрхњ (appрхњ MРєњVРєњРё░FV MРђћРєаV) Zрхњ in
    РєњрхњI (РєњрхњI MРђ▓РєњVРєњРё░FV)
\end{code}


\begin{code}
Рё░-bind-aux : Рѕђ{­ЮњФ}{A}{B}{F} Рєњ ­ЮњФ Рібрхњ Рё░-bind-prop A B F
Рё░-bind-aux {­ЮњФ}{A}{B}{F} = lobрхњ (╬Џрхњ[ M ] РєњрхњI (РєњрхњI Goal))
  where
  Goal : Рѕђ{M} Рєњ (­Юњ▒VРєњРё░F[V] A B F M) Рѕи Рё░РЪд B РЪД M Рѕи Рќирхњ Рё░-bind-prop A B F Рѕи ­ЮњФ
                 Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
  Goal{M} =
   caseрхњ (Рё░-progress (Sрхњ Zрхњ)) Mval Mred 
   where
   ­ЮњФРђ▓ = (­Юњ▒VРєњРё░F[V] A B F M) Рѕи Рё░РЪд B РЪД M Рѕи Рќирхњ Рё░-bind-prop A B F Рѕи ­ЮњФ

   Mval : ­Юњ▒РЪд B РЪД M Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
   Mval =
     let ­Юњ▒VРєњРё░F[V][M] = ╬╗ V Рєњ (M РђћРєа V)рхњ Рєњрхњ ­Юњ▒РЪд B РЪД V Рєњрхњ Рё░РЪд A РЪД (F РЪд V РЪД) in
     appрхњ (appрхњ (instрхњ{¤Ћ = ­Юњ▒VРєњРё░F[V][M]} (Sрхњ Zрхњ) M) (constрхњI (M END))) Zрхњ

   Mred : (reducible M)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
   Mred = Рё░-intro progressMred preservationMred
    where
    progressMred : (reducible M)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ progress A (F РЪд M РЪД)
    progressMred = injРѓѓрхњ (constрхњE Zрхњ ╬╗ {(MРђ▓ , MРєњMРђ▓) Рєњ constрхњI (_ , (╬Й F MРєњMРђ▓))})

    preservationMred : (reducible M)рхњ Рѕи ­ЮњФРђ▓ Рібрхњ preservation A (F РЪд M РЪД)
    preservationMred = (constрхњE Zрхњ ╬╗ redM Рєњ
                Sрхњ (╬Џрхњ[ N ] РєњрхњI (constрхњE Zрхњ ╬╗ FMРєњN Рєњ
                                          Sрхњ (redMРЄњРќиРё░N redM FMРєњN))))
     where
     redMРЄњРќиРё░N : Рѕђ{N} Рєњ reducible M Рєњ (F РЪд M РЪД РђћРєњ N) Рєњ ­ЮњФРђ▓ Рібрхњ Рќирхњ (Рё░РЪд A РЪД N)
     redMРЄњРќиРё░N {N} rM FMРєњN =
      let finv = frame-inv2{M}{N}{F} rM FMРєњN in
      let MРђ▓ = projРѓЂ finv in
      let MРєњMРђ▓ = projРѓЂ (projРѓѓ finv) in
      let NРЅА = projРѓѓ (projРѓѓ finv) in
      let РќиРё░MРђ▓ : ­ЮњФРђ▓ Рібрхњ Рќирхњ Рё░РЪд B РЪД MРђ▓
          РќиРё░MРђ▓ = appрхњ (instрхњ{¤Ћ = ╬╗ N Рєњ (M РђћРєњ N)рхњ Рєњрхњ Рќирхњ (Рё░РЪд B РЪД N)}
                        (Рё░-preservation (Sрхњ Zрхњ)) MРђ▓)
                      (constрхњI MРєњMРђ▓) in
      let РќиMРђ▓РєњVРєњ­Юњ▒VРєњРё░FV : ­ЮњФРђ▓ Рібрхњ Рќирхњ (­Юњ▒VРєњРё░F[V] A B F MРђ▓)
          РќиMРђ▓РєњVРєњ­Юњ▒VРєњРё░FV = monoрхњ (­Юњ▒VРєњРё░F[V]-expansion{­ЮњФРђ▓}{A}{B} MРєњMРђ▓ Zрхњ) in
      let IH : ­ЮњФРђ▓ Рібрхњ Рќирхњ Рё░-bind-prop A B F
          IH = Sрхњ (Sрхњ Zрхњ) in
      let РќиРё░FMРђ▓ : ­ЮњФРђ▓ Рібрхњ Рќирхњ (Рё░РЪд A РЪД (F РЪд MРђ▓ РЪД))
          РќиРё░FMРђ▓ = frame-prop-lemma IH РќиРё░MРђ▓ РќиMРђ▓РєњVРєњ­Юњ▒VРєњРё░FV in
      subst (╬╗ N Рєњ ­ЮњФРђ▓ Рібрхњ Рќирхњ Рё░РЪд A РЪД N) (sym NРЅА) РќиРё░FMРђ▓
      where
      frame-prop-lemma : Рѕђ{­ЮњФ}{A}{B}{M}{F}
         Рєњ ­ЮњФ Рібрхњ Рќирхњ Рё░-bind-prop A B F  Рєњ  ­ЮњФ Рібрхњ Рќирхњ Рё░РЪд B РЪД M
         Рєњ ­ЮњФ Рібрхњ Рќирхњ ­Юњ▒VРєњРё░F[V] A B F M   Рєњ  ­ЮњФ Рібрхњ Рќирхњ (Рё░РЪд A РЪД (F РЪд M РЪД))
      frame-prop-lemma{­ЮњФ}{A}{B}{M}{F} IH Рё░M VРєњFV =
       appрхњ(РќиРєњ (appрхњ(РќиРєњ (instрхњ(РќиРѕђ{¤ЋрхЃ = ╬╗ M Рєњ Рё░-bind-M A B F M} IH) M)) Рё░M)) VРєњFV

Рё░-bind : Рѕђ{­ЮњФ}{A}{B}{F}{M}
   Рєњ ­ЮњФ Рібрхњ Рё░РЪд B РЪД M
   Рєњ ­ЮњФ Рібрхњ (Рѕђрхњ[ V ] (M РђћРєа V)рхњ Рєњрхњ ­Юњ▒РЪд B РЪД V Рєњрхњ Рё░РЪд A РЪД (F РЪд V РЪД))
     ----------------------------------------------------------
   Рєњ ­ЮњФ Рібрхњ Рё░РЪд A РЪД (F РЪд M РЪД)
Рё░-bind {­ЮњФ}{A}{B}{F}{M} РібРё░M Ріб­Юњ▒VРєњРё░FV =
  appрхњ (appрхњ (instрхњ{­ЮњФ}{¤Ћ = ╬╗ M Рєњ Рё░-bind-M A B F M} Рё░-bind-aux M) РібРё░M) Ріб­Юњ▒VРєњРё░FV
\end{code}

