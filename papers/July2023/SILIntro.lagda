\begin{comment}
\begin{code}
{-# OPTIONS --rewriting --without-K --prop --allow-unsolved-metas #-}
module July2023.SILIntro where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Product
   using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Unit using (tt; ‚ä§)
open import Relation.Nullary using (¬¨_)
open import EquivalenceRelation public

open import Agda.Primitive using (lzero; lsuc; _‚äî_)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat
   using (‚Ñï; zero; suc; _‚â§_; _<_; _+_; _‚à∏_; _*_; z‚â§n; s‚â§s; _‚â§‚Ä≤_; ‚â§‚Ä≤-step; ‚â§-pred)
open import Data.Nat.Properties
   using (‚â§-refl; ‚â§-antisym; ‚â§-trans; ‚â§-step; ‚â§‚áí‚â§‚Ä≤; ‚â§‚Ä≤‚áí‚â§; n‚â§1+n; <‚áí‚â§; s‚â§‚Ä≤s; 0‚â¢1+n; *-distribÀ°-+; +-comm)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Unit.Polymorphic renaming (‚ä§ to top·µñ; tt to tt·µñ)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; trans; cong; cong‚ÇÇ; cong-app; subst)
open import Function using (id; _‚àò_)
open import Level using (Lift)
open import StepIndexedLogic2
open import PropP

\end{code}
\end{comment}

\section{How to Use a Step-Indexed Logic}
\label{sec:SIL-intro}

The first thing to know about SIL is that it is a logic that emulates
Agda's logic. For example, the type of a logical formula in Agda is
\textsf{Set} and in SIL it is \textsf{Set}·µí. To distinguish SIL from
Agda, we add a superscript ``o'' to most names. Unlike \textsf{Set},
the \textsf{Set}·µí type is parameterized by two lists that enable SIL
to ensure that recursively-defined predicates are well formed.
We discuss recursively-defined predicates in Section~\ref{sec:intro-recursive-predicates}.
For now, we use empty lists and define \textsf{Set}‚Å∞ as short-hand
for \textsf{Set·µí [] []}.

\begin{code}
Set‚Å∞ : Set‚ÇÅ
Set‚Å∞ = Set·µí [] []
\end{code}

\noindent Let the following variables range over \textsf{Set}‚Å∞.

\begin{code}
variable œï œï‚Ä≤ œà œà‚Ä≤ œá œá‚Ä≤ : Set‚Å∞
\end{code}

SIL defines an entailment relation ùí´ ‚ä¢·µí œï to express that a SIL
formula œï is provable from the list of formulas ùí´. If ùí´ is empty, then
œï is just plain true.

We use anoynymous definitions in Agda as a way to display some value
and its type. For example, the answer to life, the universe, and
everything is the natural number 42.

\begin{code}
_ : ‚Ñï
_ = 42
\end{code}

The ``pure'' connective, written \textsf{p ·µí}. imports the Agda
proposition \textsf{p} into SIL.

\begin{code}
_ : Set ‚Üí Set‚Å∞
_ = _·µí
\end{code}

\noindent For example, we can use the pure connective to express
properties of numbers, such as $1 \plus 1 = 2$.

\begin{code}
_ : Set‚Å∞
_ = (1 + 1 ‚â° 2)·µí
\end{code}

\subsection{SIL is a propositional logic}

The ``true'' formula in SIL is written ‚ä§·µí and
the ``false'' formula is ‚ä•·µí.

\begin{code}
_ : Set‚Å∞
_ = ‚ä§·µí

_ : Set‚Å∞
_ = ‚ä•·µí
\end{code}

\noindent SIL includes the logical connectives for conjunction,
disjunction, and implication.

\begin{code}
_ : Set‚Å∞ ‚Üí Set‚Å∞ ‚Üí Set‚Å∞
_ = _√ó·µí_

_ : Set‚Å∞ ‚Üí Set‚Å∞ ‚Üí Set‚Å∞
_ = _‚äé·µí_

_ : Set‚Å∞ ‚Üí Set‚Å∞ ‚Üí Set‚Å∞
_ = _‚Üí·µí_
\end{code}

\noindent The meanings of these quantifiers match those of the
corresponding ones in Agda.


\subsection{SIL is a first-order logic}

\begin{code}
variable A B C : Set
\end{code}

SIL is a first-order logic, so it includes the universal and
existential quantifiers. SIL uses Agda functions to handle the
quantification.  So the ``for all'' quantifier ‚àÄ·µí has the following
type.

\begin{code}
_ : (A ‚Üí Set‚Å∞) ‚Üí Set‚Å∞
_ = ‚àÄ·µí
\end{code}

\noindent As a simple example, the following SIL formula says that
for any $x$, $2x = x \plus x$.

\begin{code}
_ : Set‚Å∞
_ = ‚àÄ·µí Œª x ‚Üí (2 * x ‚â° x + x)·µí
\end{code}

\noindent SIL provides alternate notation for universal
quantification, replacing the Œª with a pair of brackets around the
bound variable.

\begin{code}
_ : Set‚Å∞
_ = ‚àÄ·µí[ x ‚¶Ç ‚Ñï ] (2 * x ‚â° x + x)·µí
\end{code}

For the existential quantifier of SIL, we also use Agda functions for
quantification.

\begin{code}
_ : (A ‚Üí Set‚Å∞) ‚Üí Set‚Å∞
_ = ‚àÉ·µí
\end{code}

\noindent The following formula shows an example use of the
existential in SIL to state that there exists a number $x$ such that
$2x =6$.

\begin{code}
_ : Set‚Å∞
_ = ‚àÉ·µí[ x ] (2 * x ‚â° 6)·µí
\end{code}

\subsection{SIL has User-defined Recursive Predicates}
\label{sec:intro-recursive-predicates}

The central feature of SIL is user-defined recursive predicates, via
the Œº·µí operator. To present a familiar example, we define the
even numbers in SIL. Recall that in Agda we could define the even
numbers as follows using a \textsf{data} definition.

\begin{code}
data Even : ‚Ñï ‚Üí Set where
  Even-zero : Even zero
  Even-plus-two : ‚àÄ m ‚Üí Even m ‚Üí Even (2 + m)
\end{code}

To define a recursive predicate in SIL, we apply the Œº·µí connective to
a function from the predicate's domain to a SIL formula. Here's the
definition of \textsf{Even}‚Ä≤ in SIL, which we explain in detail below.

\begin{code}
Even‚Å∞ : ‚Ñï ‚Üí Set‚Å∞
Even‚Å∞ = Œº·µí Œª n ‚Üí (n ‚â° zero)·µí ‚äé·µí (‚àÉ·µí[ m ] (n ‚â° 2 + m)·µí √ó·µí ‚ñ∑·µí (m ‚àà rec·µí))
\end{code}

\noindent The formula \textsf{rec·µí} stands for ``this recursive
predicate``.  So $m ‚àà \mathsf{rec}·µí$ is morally equivalent to saying
$m ‚àà \mathsf{Even}‚Å∞$.  More precisely, \textsf{rec}·µí refers to the
nearest enclosing Œº·µí.

The use of the ``later'' operator ‚ñ∑·µí in $‚ñ∑·µí (m ‚àà \mathsf{rec}·µí)$
serves to guard the recursion to ensure that the recursive definition
is well formed. The addition of the ‚ñ∑·µí operator to SIL make it a
temporal logic, and more broadly, a modal logic. We discuss the rules
for conducting proofs involving the ‚ñ∑·µí operator in
Section~\ref{sec:proof-rules}.

SIL uses the two parameters of \textsf{Set}·µí to enforce the
well-formedness of recursive definitions. The first parameter is a
list of the domain types for all the recursive predicates in scope
(often just zero or one). We refer to such as list as a
\textsf{Context}. Let Œì range over contexts.

\begin{code}
variable Œì : Context
\end{code}

\noindent The second parameter of \textsf{Set}·µí tracks the usage time
(\textsf{Now} or \textsf{Later}) for each recursive predicate that is
in scope. Let Œî range over a list of usage times.

\begin{code}
variable Œî Œî‚ÇÅ Œî‚ÇÇ : Times Œì
\end{code}

\noindent When SIL sees the use of a recursive predicate (such as
$\mathsf{rec}·µí$ for the predicate with de Bruijn index zero), SIL
clasifies that predicate as being used \textsf{Now}. (The
\textsf{laters} function creates a list of the same length as Œì whose
elements are all \textsf{Later}.)

\begin{code}
_ : A ‚Üí Set·µí (A ‚à∑ Œì) (Now ‚à∑ laters Œì)
_ = _‚àà rec·µí
\end{code}

In the unlikely event that you have multiple nested Œº·µí in a formula,
you can replace \textsf{rec·µí} with a natural number (a de Bruijn index
built from \textsf{zero}·µí and \textsf{suc}·µí) that specifies which Œº·µí
you want to refer to. Each de Bruijn index has a type of the form Œì ‚àã
A, where \textsf{A} is the domain type of the predicate and Œì is the
current context.  The membership connective $a ‚àà x$ has the following
type, where the \textsf{var-now} function assigns variable $x$ the
time \textsf{Now} and all the other variables in $Œì$ are assigned
\textsf{Later}.

\begin{code}
_ : A ‚Üí (x : Œì ‚àã A) ‚Üí Set·µí Œì (var-now Œì x)
_ = _‚àà_
\end{code}

When the ‚ñ∑·µí operator is applied to a subformula, all the predicates
that were used \textsf{Now} inside the subformula are instead
considered to be used \textsf{Later}.

\begin{code}
_ : Set·µí Œì Œî ‚Üí Set·µí Œì (laters Œì)
_ = ‚ñ∑·µí
\end{code}

Finally, when we apply the Œº·µí operator, SIL checks to make sure that
the recursive uses of this predicate in its own body were categorized
as \textsf{Later}.

\begin{code}
_ : (A ‚Üí Set·µí (A ‚à∑ Œì) (Later ‚à∑ Œî)) ‚Üí (A ‚Üí Set·µí Œì Œî)
_ = Œº·µí
\end{code}


\subsection{The Proof Language of SIL}
\label{sec:proof-rules}

Next we discuss how to conduct proofs in SIL. 
Let ùí´ range over lists of propositions.

\begin{code}
variable ùí´ : List (Set‚Å∞)
\end{code}

\noindent We write $ùí´ ‚ä¢·µí œï$ for entailment, which means that œï is true when
the list of formulas in ùí´ are true.

\begin{code}
_ : List (Set‚Å∞) ‚Üí Set‚Å∞ ‚Üí Prop
_ = _‚ä¢·µí_
\end{code}

\noindent When $ùí´$ is the empty list, as in $[] ‚ä¢·µí œï$, then we say
that œï is unconditionally true (or just true).  In the rest of this
section we discuss the rules of SIL that can be used to prove an
entailment.

Let the following variables range over formulas in Agda.
\begin{code}
variable p q r : Set
\end{code}

We start with the pure connective. Given a proof of an Agda formula
$p$, the rule \textsf{pure·µíI} produces a proof of $ùí´ ‚ä¢·µí p ·µí$.

\begin{code}
_ : p ‚Üí ùí´ ‚ä¢·µí p ·µí
_ = pure·µíI
\end{code}

\noindent For example, we can prove that $1 \plus 1 = 2$ in SIL as
follows.

\begin{code}
_ : [] ‚ä¢·µí ((1 + 1 ‚â° 2)·µí)
_ = pure·µíI refl
\end{code}

If instead you already have a proof of $p·µí$ and have some other goal œá
to prove, then you can assume $p$ is true while proving œá.  That is,
$\mathsf{pure}·µíE\, œï\, F$ is a proof of œá if œï is a proof of p·µí and
$F$ is a function from $p$ to a proof of œá.

\begin{code}
_ : ùí´ ‚ä¢·µí p ·µí  ‚Üí  (p ‚Üí ùí´ ‚ä¢·µí œá)  ‚Üí  ùí´ ‚ä¢·µí œá
_ = pure·µíE
\end{code}

\noindent For example, we can prove that $(x ‚â° y)·µí$
implies $(y ‚â° x)·µí$ using \textsf{pure·µíE} as follows.

\begin{code}
_ : ‚àÄ(x y : ‚Ñï) ‚Üí [] ‚ä¢·µí (x ‚â° y) ·µí ‚Üí [] ‚ä¢·µí (y ‚â° x)·µí
_ = Œª x y x=y·µí ‚Üí pure·µíE x=y·µí Œª {refl ‚Üí pure·µíI refl}
\end{code}

\subsubsection{Reasoning in Propositional Logic}

For the propositional connectives, many of the proof rules are the
same as those in Agda but with a superscript ``o''.  For example, the
introduction rule for ‚ä§ in Agda is \textsf{tt} so in SIL it is
\textsf{tt}·µí.

\begin{code}
_ : ùí´ ‚ä¢·µí ‚ä§·µí 
_ = tt·µí
\end{code}

For conjunction, the introduction rule is the comma and elimination is
\textsf{proj‚ÇÅ·µí} and \textsf{proj‚ÇÇ·µí}.

\begin{code}
_ : ùí´ ‚ä¢·µí œï ‚Üí ùí´ ‚ä¢·µí œà ‚Üí ùí´ ‚ä¢·µí œï √ó·µí œà
_ = _,·µí_

_ : ùí´ ‚ä¢·µí œï √ó·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï
_ = proj‚ÇÅ·µí

_ : ùí´ ‚ä¢·µí œï √ó·µí œà  ‚Üí  ùí´ ‚ä¢·µí œà
_ = proj‚ÇÇ·µí
\end{code}

\noindent As an example use of the rules for conjuction, here is one
direction of the associativity of conjunction.

\begin{code}
_ : ùí´ ‚ä¢·µí œï √ó·µí (œà √ó·µí œá)  ‚Üí  ùí´ ‚ä¢·µí (œï √ó·µí œà) √ó·µí œá
_ = Œª œï√ó[œà√óœá] ‚Üí (proj‚ÇÅ·µí œï√ó[œà√óœá] ,·µí (proj‚ÇÅ·µí (proj‚ÇÇ·µí œï√ó[œà√óœá]))) ,·µí proj‚ÇÇ·µí (proj‚ÇÇ·µí œï√ó[œà√óœá])
\end{code}

For disjunction, the introduction rules are \textsf{inj‚ÇÅ·µí} and
\textsf{inj‚ÇÇ·µí}.

\begin{code}
_ : ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œï ‚äé·µí œà
_ = inj‚ÇÅ·µí

_ : ùí´ ‚ä¢·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï ‚äé·µí œà
_ = inj‚ÇÇ·µí
\end{code}

\noindent Agda uses its builtin pattern-matching to eliminate
disjunction. So for SIL, we instead define the following
\textsf{case} rule. If you have a proof of $œï ‚äé·µí œà$ and would like to
prove œá, then it suffices to prove two cases: 1) assuming œï show œá and
2) assuming œà show œá.

\begin{code}
_ : ùí´ ‚ä¢·µí œï ‚äé·µí œà  ‚Üí  œï ‚à∑ ùí´ ‚ä¢·µí œá  ‚Üí  œà ‚à∑ ùí´ ‚ä¢·µí œá  ‚Üí  ùí´ ‚ä¢·µí œá
_ = case·µí
\end{code}

\noindent The \textsf{case}·µí rule adds assumptions to the left-hand
side of the entailment. To make use of such assumptions, specify its
position in the list using a natural number. So zero refers to the
front of the list:

\begin{code}
_ : œï ‚à∑ ùí´ ‚ä¢·µí œï
_ = Z·µí
\end{code}

\noindent and the successor operator skips over the front of the list
(aka. weakening).

\begin{code}
_ : ùí´ ‚ä¢·µí œà  ‚Üí  œï ‚à∑ ùí´ ‚ä¢·µí œà
_ = S·µí
\end{code}

Putting these ingredients together, the following proof shows that
disjunction is commutative using its introduction and elimination
rules and also the \textsf{Z}·µí rule for accessing the assumption.

\begin{code}
_ : ùí´ ‚ä¢·µí œï ‚äé·µí œà  ‚Üí  ùí´ ‚ä¢·µí œà ‚äé·µí œï
_ = Œª œï‚äéœà ‚Üí case·µí œï‚äéœà (inj‚ÇÇ·µí Z·µí) (inj‚ÇÅ·µí Z·µí)
\end{code}

Implication is introduced by ‚Üí·µíI. To prove the implication œï ‚Üí·µí œà, it
suffices to prove œà while assuming œï.

\begin{code}
_ : (œï ‚à∑ ùí´ ‚ä¢·µí œà)  ‚Üí  (ùí´ ‚ä¢·µí œï ‚Üí·µí œà)
_ = ‚Üí·µíI
\end{code}

\noindent To streamline the usual combination of ‚Üí·µíI and Z·µí, SIL
provides Œª·µí, which uses an Agda function to quantifier over the
assumption.

\begin{code}
_ : ‚àÄ œï ‚Üí (œï ‚à∑ ùí´ ‚ä¢·µí œï  ‚Üí  œï ‚à∑ ùí´ ‚ä¢·µí œà)  ‚Üí  ùí´ ‚ä¢·µí œï ‚Üí·µí œà
_ = Œª·µí
\end{code}

\noindent For example, here is a proof that œï implies œï.

\begin{code}
_ : ‚àÄ œï ‚Üí  [] ‚ä¢·µí œï ‚Üí·µí œï
_ = Œª œï ‚Üí  Œª·µí œï Œª x ‚Üí x
\end{code}

\noindent SIL provides the following alternative syntax for Œª·µí that
replaces the extra Œª with brackets.

\begin{code}
_ : ‚àÄ œï ‚Üí  [] ‚ä¢·µí œï ‚Üí·µí œï
_ = Œª œï ‚Üí  Œª·µí[ x ‚¶Ç œï ] x
\end{code}

\noindent Implication is eliminated by ‚Üí·µíE.
\begin{code}
_ : ùí´ ‚ä¢·µí œï ‚Üí·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œà
_ = ‚Üí·µíE
\end{code}

\noindent The following example proof applies the introduction and
elimination rules for implication to prove that implication is
transitive.

\begin{code}
_ : (ùí´ ‚ä¢·µí œï ‚Üí·µí œà)  ‚Üí  (ùí´ ‚ä¢·µí œà ‚Üí·µí œá)  ‚Üí  (ùí´ ‚ä¢·µí œï ‚Üí·µí œá)
_ = Œª œï‚Üíœà œà‚Üíœá ‚Üí Œª·µí[ x ‚¶Ç _ ] ((‚Üí·µíE (S·µí œà‚Üíœá) (‚Üí·µíE (S·µí œï‚Üíœà) x)))
\end{code}

\subsubsection{Reasoning in First-Order Logic}

Next we consider the proof rules for universal and existential
quantifiers.  The universal quantifier is introduced by Œõ·µí. So to
prove $‚àÄ·µí[ a ‚¶Ç A ]\, œï·µÉ\, a$, you apply Œõ·µí to an Agda function that,
given an arbitrary $a$, produces a proof of $œï·µÉ\, a$.

\begin{code}
_ : {œï·µÉ : A ‚Üí Set‚Å∞} ‚Üí (‚àÄ a ‚Üí ùí´ ‚ä¢·µí œï·µÉ a)  ‚Üí  ùí´ ‚ä¢·µí ‚àÄ·µí[ a ‚¶Ç A ] œï·µÉ a
_ = Œõ·µí
\end{code}

\noindent SIL also provides a bracket notation for Œõ·µí. As an example
use of ‚àÄ·µí and Œõ·µí, we state and prove that addition is commutative.

\begin{code}
‚àÄx,y,x+y=y+x : [] ‚ä¢·µí ‚àÄ·µí[ x ‚¶Ç ‚Ñï ] ‚àÄ·µí[ y ‚¶Ç ‚Ñï ] (x + y ‚â° y + x)·µí
‚àÄx,y,x+y=y+x = Œõ·µí[ x ] Œõ·µí[ y ] pure·µíI (+-comm x y)
\end{code}

\noindent The universal quantifier is eliminated by ‚àÄ·µíE.

\begin{code}
_ : ‚àÄ{œï·µÉ : A ‚Üí Set‚Å∞} ‚Üí ùí´ ‚ä¢·µí ‚àÄ·µí œï·µÉ  ‚Üí  (a : A)  ‚Üí  ùí´ ‚ä¢·µí œï·µÉ a
_ = ‚àÄ·µíE
\end{code}

\noindent For example, the following proves that $x = x \plus 0$ using the
above proof of the commutativity of addition.

\begin{code}
_ : ‚àÄ (x : ‚Ñï) ‚Üí [] ‚ä¢·µí (x ‚â° x + 0)·µí
_ = Œª x ‚Üí pure·µíE (‚àÄ·µíE (‚àÄ·µíE ‚àÄx,y,x+y=y+x x) 0) Œª x+0=x ‚Üí pure·µíI (sym x+0=x)
\end{code}

The existential quantifier of SIL is introduced by the rule ‚àÉ·µíI and
eliminated by the rule unpack·µí.

\begin{code}
_ : ‚àÄ{œï·µÉ : A ‚Üí Set‚Å∞} ‚Üí  (a : A)  ‚Üí  ùí´ ‚ä¢·µí œï·µÉ a  ‚Üí  ùí´ ‚ä¢·µí ‚àÉ·µí œï·µÉ
_ = ‚àÉ·µíI

_ : ‚àÄ{œï·µÉ : A ‚Üí Set‚Å∞}{œá : Set‚Å∞}
     ‚Üí ùí´ ‚ä¢·µí ‚àÉ·µí œï·µÉ  ‚Üí  (‚àÄ a  ‚Üí  œï·µÉ a ‚à∑ ùí´ ‚ä¢·µí œï·µÉ a  ‚Üí  œï·µÉ a ‚à∑ ùí´ ‚ä¢·µí œá)  ‚Üí  ùí´ ‚ä¢·µí œá
_ = unpack·µí
\end{code}

\noindent The following example proves that doubling an even number
yields an even number.

\begin{code}
private variable n : ‚Ñï
\end{code}

\begin{code}
_ : ([] ‚ä¢·µí ‚àÉ·µí[ x ] (n ‚â° 2 * x)·µí) ‚Üí ([] ‚ä¢·µí ‚àÉ·µí[ x ] (2 * n ‚â° 2 * x)·µí)
_ = Œª n-even ‚Üí unpack·µí n-even Œª x n=2x·µí ‚Üí
               pure·µíE n=2x·µí Œª {refl ‚Üí ‚àÉ·µíI (2 * x) (pure·µíI refl)}
\end{code}

\subsubsection{Reasoning about ``later''}

As mentioned above, SIL is a temporal logic and the ‚ñ∑·µí
operator means ``later''. Furthermore, SIL is designed so that if a
formula is true now, then it remains true in the future. The following
\textsf{mono·µí} (for monotonic) proof rule exhibits this invariant.

\begin{code}
_ : (ùí´ ‚ä¢·µí œï)  ‚Üí  (ùí´ ‚ä¢·µí  ‚ñ∑·µí œï)
_ = mono·µí
\end{code}

The ‚ñ∑·µí operator distributes over the other logical connectives.  For
example, if you have a conjunction that is true later, then you have a
conjunction (now) of two formulas that are true later.

\begin{code}
_ : ùí´ ‚ä¢·µí ‚ñ∑·µí (œï √ó·µí œà)  ‚Üí  ùí´ ‚ä¢·µí (‚ñ∑·µí œï) √ó·µí (‚ñ∑·µí œà)
_ = ‚ñ∑√ó
\end{code}

\noindent Similarly, ‚ñ∑·µí distributes with implication.

\begin{code}
_ : ùí´ ‚ä¢·µí ‚ñ∑·µí (œï ‚Üí·µí œà)  ‚Üí  ùí´ ‚ä¢·µí (‚ñ∑·µí œï) ‚Üí·µí (‚ñ∑·µí œà)
_ = ‚ñ∑‚Üí
\end{code}

\noindent The following derived rule captures a common pattern of
reasoning for proofs in SIL. You have a proof of $‚ñ∑·µí\, œï$
and you know that œï implies œà, and you need to prove
that $‚ñ∑·µí\, œà$. Can you think of how to prove this using
\textsf{mono·µí}, \textsf{‚ñ∑·µí}, \textsf{‚Üí·µíI}, and \textsf{‚Üí·µíE}?
If not that's OK, just use the following derived rule.

\begin{code}
_ : ùí´ ‚ä¢·µí ‚ñ∑·µí œï  ‚Üí  œï ‚à∑ ùí´ ‚ä¢·µí œà  ‚Üí  ùí´ ‚ä¢·µí ‚ñ∑·µí œà
_ = ‚ñ∑‚Üí‚ñ∑
\end{code}

We also find it useful to introduce an operator that expresses $k$
repetitions of ``later'', which we call the ``eventually'' operator,
written $‚óá·µí\, k$.

\begin{code}
_ : ‚Ñï ‚Üí Set·µí Œì Œî ‚Üí Set·µí Œì (laters Œì)
_ = ‚óá·µí
\end{code}

\noindent When $k = 0$, ‚óá·µí is equivalent to ‚ñ∑·µí.

\begin{code}
_ : ‚óá·µí 0 œï ‚â° ‚ñ∑·µí œï
_ = refl
\end{code}

\noindent Otherwise, we have the following equation that adds one more
‚ñ∑·µí for each $k$.

\begin{code}
private variable k : ‚Ñï
\end{code}

\begin{code}
_ : ‚óá·µí (suc k) œï ‚â° ‚óá·µí k (‚ñ∑·µí œï)
_ = refl
\end{code}

\noindent The ‚ñ∑·µí operator commutes with the ‚óá·µí operator.

\begin{code}
_ : ‚àÄ i ‚Üí ùí´ ‚ä¢·µí ‚ñ∑·µí (‚óá·µí i œï) ‚Üí ùí´ ‚ä¢·µí ‚óá·µí i (‚ñ∑·µí œï)
_ = ‚ñ∑‚óá‚áí‚óá‚ñ∑
\end{code}

Perhaps one of the surprising things about SIL is that the ``later''
and ``eventually'' operators ultimately do not matter. If you can show
that a formula œï is eventually true (with no assumptions), then it is
just plain true.

\begin{code}
_ : [] ‚ä¢·µí ‚ñ∑·µí œï ‚Üí [] ‚ä¢·µí œï
_ = ‚ñ∑œï‚áíœï

_ : ‚àÄ k ‚Üí [] ‚ä¢·µí ‚óá·µí k œï ‚Üí [] ‚ä¢·µí œï
_ = ‚óáœï‚áíœï
\end{code}

\noindent (The corresponding rule with some assumptions, 
$(ùí´ ‚ä¢·µí ‚ñ∑·µí œï) ‚Üí (ùí´ ‚ä¢·µí œï)$, would be unsound. The sound generalization is
the Weak-‚ñ∑ rule of \citet{Dreyer:2009aa}:
$ùí´ ‚ä¢·µí ‚ñ∑·µí œï ‚Üí ‚óÅ ùí´ ‚ä¢·µí œï$ where ‚óÅ is the ``earlier'' operator.)

\subsubsection{Recursive Predicates}

The introduction rule for recursive predicates is \textsf{fold}·µí. The
rule involves a new operator named \textsf{let}·µí that we discuss
below.

\begin{code}
_ : (S·µÉ : A ‚Üí Set·µí (A ‚à∑ []) (Later ‚à∑ [])) (a : A) ‚Üí  (ùí´ ‚ä¢·µí let·µí (Œº·µí S·µÉ) (S·µÉ a))  ‚Üí  (ùí´ ‚ä¢·µí Œº·µí S·µÉ a)
_ = fold·µí
\end{code}

As an example use of \textsf{fold}·µí, we prove that $0$ is even.
Recall that we defined \textsf{Even}‚Å∞ as follows.

\begin{code}
_ : Even‚Å∞  ‚â°  Œº·µí Œª n ‚Üí (n ‚â° zero)·µí ‚äé·µí (‚àÉ·µí[ m ] (n ‚â° 2 + m)·µí √ó·µí ‚ñ∑·µí (m ‚àà rec·µí))
_ = refl
\end{code}

\noindent The first argument of \textsf{fold}·µí needs to be the body of
the Œº·µí.  To give it a name, we define \textsf{Even·µí} as follows.

\begin{code}
Even·µí : ‚Ñï ‚Üí Set·µí (‚Ñï ‚à∑ []) (Later ‚à∑ [])
Even·µí = Œª n ‚Üí (n ‚â° zero)·µí ‚äé·µí (‚àÉ·µí[ m ] (n ‚â° 2 + m)·µí √ó·µí ‚ñ∑·µí (m ‚àà rec·µí))
\end{code}

\noindent The second arugment of \textsf{fold}·µí is the element in the
predicate, in this case $0$, and the third argument is a proof that
the body of the predicate is true of the given element ($0$). Here's
the proof that $0$ is even, with more discussion of \textsf{even-z} in
the next paragraph.

\begin{code}
even-zero : [] ‚ä¢·µí Even‚Å∞ 0
even-zero = fold·µí Even·µí 0 even-z
  where
  even-z : [] ‚ä¢·µí ((0 ‚â° zero) ·µí) ‚äé·µí (‚àÉ·µí[ m ] (0 ‚â° 2 + m)·µí √ó·µí ‚ñ∑·µí (Œº·µí Even·µí m))
  even-z = inj‚ÇÅ·µí (pure·µíI refl)
\end{code}

Looking back at the type of \textsf{fold}·µí, there seems to be a
mismatch between the type of the third parameter of \textsf{fold}·µí,
which involves \textsf{let}·µí, and the type of \textsf{even-z}, which
does not.  SIL defines rewrite rules that automatically propagate the
\textsf{let}·µí down into the formula until it reaches the membership
operator $a ‚àà x$, at which point the $x$ is replaced by the right-hand
side of the \textsf{let}·µí.  In this example, the relevant rewrite is:

\begin{code}
_ : ‚àÄ {m} ‚Üí let·µí (Œº·µí Even·µí) (m ‚àà rec·µí)  ‚â°  Œº·µí Even·µí m
_ = refl
\end{code}

The eleminiation rule for Œº·µí is \textsf{unfold}·µí.

\begin{code}
_ : ‚àÄ{ùí´} (S·µÉ : A ‚Üí Set·µí (A ‚à∑ []) (Later ‚à∑ [])) (a : A) ‚Üí  (ùí´ ‚ä¢·µí Œº·µí S·µÉ a)  ‚Üí  (ùí´ ‚ä¢·µí let·µí (Œº·µí S·µÉ) (S·µÉ a))
_ = unfold·µí
\end{code}

\noindent As an example, consider the fact that $1$ is not even.  We
can prove this by unfolding $Œº·µí\, Even·µí\, 1$, from which we obtain
that either $1 = 0$ or $1 = 2 \plus m$ for some $m$. Either case is
impossible, so we have a contradiction.

\begin{code}
one-not-even : [] ‚ä¢·µí Œº·µí Even·µí 1 ‚Üí [] ‚ä¢·µí ‚ä•·µí
one-not-even even-one =
  (case·µí (unfold·µí Even·µí 1 even-one)
    (pure·µíE Z·µí Œª{()})
    (unpack·µí Z·µí Œª m [0=2+m]√ó[even-m] ‚Üí pure·µíE (proj‚ÇÅ·µí [0=2+m]√ó[even-m]) Œª{()}))
\end{code}

In addition to \textsf{fold·µí} and \textsf{unfold·µí}, one often needs to
use induction when reasoning about recursive defintions. For example,
in plain old Agda, we can prove that \textsf{Even n} implies that $n$
is a multiple of $2$ by defining the following recursive function named
\textsf{even-mul2}.

\begin{code}
even-mul2 : ‚àÄ n ‚Üí Even n ‚Üí ‚àÉ[ m ] n ‚â° 2 * m
even-mul2 .zero Even-zero = 0 , refl
even-mul2 .(2 + m) (Even-plus-two m even-m)
    with even-mul2 m even-m
... | m‚Ä≤ , refl = suc m‚Ä≤ , sym (*-distribÀ°-+ 2 1 m‚Ä≤)
\end{code}

\noindent SIL provides one kind of induction, the \textsf{lob·µí} rule.
It states that when trying to prove œï, it is permissible to assume $‚ñ∑·µí œï$.

\begin{code}
_ : ‚ñ∑·µí œï ‚à∑ ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œï
_ = lob·µí
\end{code}

\noindent At first the \textsf{lob·µí} rule may seem mysterious, so let
us see its use in an example. We shall prove that \textsf{Even‚Å∞ n}
implies that $n$ is a multiple of $2$.  When we use the \textsf{lob·µí}
rule, we must state the property entirely within SIL, so in the
following proof we restate our goal with the definition of
\textsf{aux}. Looking closely at the type of \textsf{aux}, 
note that we inserted \textsf{‚óá·µí n} in the conclusion.  The reason is
that the \textsf{lob·µí} rules inserts another ‚ñ∑·µí around the conclusion
every time we use the induction hypothesis. We use the ‚óá·µí operator to
collect them into one connective, and then we apply the ‚óáœï‚áíœï rule at
the end of the proof to get rid of it.

\begin{minipage}{\textwidth}
\begin{code}
even0-mul2 : ‚àÄ n ‚Üí [] ‚ä¢·µí Even‚Å∞ n ‚Üí [] ‚ä¢·µí (Œ£[ m ‚àà ‚Ñï ] n ‚â° 2 * m)·µí
even0-mul2 n even-n = ‚óáœï‚áíœï n (‚Üí·µíE (‚àÄ·µíE aux n) even-n) where
  aux : [] ‚ä¢·µí ‚àÄ·µí[ n ‚¶Ç ‚Ñï ] (Œº·µí Even·µí n) ‚Üí·µí ‚óá·µí n ((‚àÉ[ m ] n ‚â° 2 * m)·µí)
  aux = lob·µí (Œõ·µí[ n ] Œª·µí[ even-n ‚¶Ç Œº·µí Even·µí n ]
          case·µí (unfold·µí Even·µí n even-n)
          {- Case n = 0 -}
            (pure·µíE Z·µí Œª{ refl ‚Üí mono·µí (pure·µíI (0 , refl)) })
          {- Case n = 2 + m and ‚ñ∑ (Even m) -}
            (unpack·µí Z·µí Œª m [n=2+m]√ó[even-m] ‚Üí
              pure·µíE (proj‚ÇÅ·µí [n=2+m]√ó[even-m]) Œª{ refl ‚Üí
              let IH : _ ‚ä¢·µí ‚ñ∑·µí (‚óá·µí m ((‚àÉ[ m‚Ä≤ ] m ‚â° 2 * m‚Ä≤)·µí))
                  IH = ‚Üí·µíE (‚ñ∑‚Üí (‚àÄ·µíE (‚ñ∑‚àÄ (S·µí (S·µí (S·µí Z·µí)))) m)) (proj‚ÇÇ·µí Z·µí) in
              ‚óá‚Üí‚óá m (‚ñ∑‚óá‚áí‚óá‚ñ∑ m IH) (‚ñ∑‚Üí‚ñ∑ Z·µí (pure·µíE Z·µí Œª {(m‚Ä≤ , refl) ‚Üí
              mono·µí (pure·µíI ((suc m‚Ä≤) , sym (*-distribÀ°-+ 2 1 m‚Ä≤)))}))}))
\end{code}
\end{minipage}

Comparing \textsf{even-mul2} to \textsf{even0-mul2}, we see that the
proof in SIL is considerably more verbose than in plain Agda.  Thus,
we only recommend using SIL to define recursive predicates that can't
easily be defined in plain old Agda, such as step-indexed logical
relations.


\subsubsection{Encoding Mutually Recursive Predicates in SIL}
\label{sec:mutually-recursive}

In our case study in Section~\ref{sec:log-rel}, we define two mutually
recursive predicates ùí± and ‚Ñ∞, so here we introduce how to encode
mutual recursion using a more familiar example. We define the even and
odd numbers in SIL. Here is the equivalent definition in Agda.

\begin{code}
data Evens : ‚Ñï ‚Üí Set 
data Odds : ‚Ñï ‚Üí Set

data Evens where
  Evens-zero : Evens zero
  Evens-suc : ‚àÄ m ‚Üí Odds m ‚Üí Evens (suc m)
  
data Odds where
  Odds-suc : ‚àÄ m ‚Üí Evens m ‚Üí Odds (suc m)
\end{code}

The technique that we use for encoding mutual recursion is to merge
the two predicates into a single predicate whose domain is the sum of
the domains of the two predicates. In this case, the first injection
indicates a request to test if the number is even and the second
injection indicates a request to test if the number is odd.

\begin{code}
Evens‚äéOdds : ‚Ñï ‚äé ‚Ñï ‚Üí Set·µí ((‚Ñï ‚äé ‚Ñï) ‚à∑ []) (Later ‚à∑ [])
Evens‚äéOdds (inj‚ÇÅ n) = (n ‚â° zero)·µí ‚äé·µí (‚àÉ·µí[ m ] (n ‚â° suc m)·µí √ó·µí ‚ñ∑·µí (inj‚ÇÇ m ‚àà rec·µí))
Evens‚äéOdds (inj‚ÇÇ n) = ‚àÉ·µí[ m ] (n ‚â° suc m)·µí √ó·µí ‚ñ∑·µí (inj‚ÇÅ m ‚àà rec·µí)
\end{code}

In the first line of \textsf{Evens‚äéOdds}, we write
$\mathsf{inj}‚ÇÇ\, m ‚àà \mathsf{rec}·µí$ to test whether $m$ is odd.
In the second line of \textsf{Evens‚äéOdds}, we write 
$\mathsf{inj}‚ÇÅ\, m ‚àà \mathsf{rec}·µí$ to test whether $m$ is even.

We apply the Œº·µí connective to \textsf{Evens‚äéOdds} to define
\textsf{Evens}‚Ä≤ and then \textsf{Odds}‚Ä≤, using \textsf{inj‚ÇÅ n} for the
argument in \textsf{Evens}‚Ä≤ and using \textsf{inj‚ÇÇ n} for the argument
in \textsf{Odds}‚Ä≤.

\begin{code}
Evens‚Ä≤ : ‚Ñï ‚Üí Prop
Evens‚Ä≤ n = [] ‚ä¢·µí Œº·µí Evens‚äéOdds (inj‚ÇÅ n)

Odds‚Ä≤ : ‚Ñï ‚Üí Prop
Odds‚Ä≤ n = [] ‚ä¢·µí Œº·µí Evens‚äéOdds (inj‚ÇÇ n)
\end{code}


\subsubsection{Reasoning about Equivalent Step-indexed Formulas}
\label{sec:formula-equivalence}

SIL expresses the equivalence of two step-indexed formulas with the ‚â°·µí
operator.

\begin{code}
_ : Set·µí Œì Œî ‚Üí Set·µí Œì Œî ‚Üí Prop‚ÇÅ
_ = _‚â°·µí_
\end{code}

\noindent For example, we can express that conjunction is commutative
using the ‚â°·µí operator as follows.

\begin{code}
_ : Set‚Å∞ ‚Üí Set‚Å∞ ‚Üí Prop‚ÇÅ
_ = Œª œï œà ‚Üí œï √ó·µí œà ‚â°·µí œà √ó·µí œï
\end{code}

\noindent The ‚â°·µí operator is an equivalence relation; it is reflexive,
symmetric, and transitive.

\begin{code}
_ : œï ‚â° œà ‚Üí œï ‚â°·µí œà
_ = ‚â°·µí-refl

_ : œï ‚â°·µí œà ‚Üí œà ‚â°·µí œï
_ = ‚â°·µí-sym

_ : œï ‚â°·µí œà ‚Üí œà ‚â°·µí œá ‚Üí œï ‚â°·µí œá
_ = ‚â°·µí-trans
\end{code}

The \textsf{subst}·µí rule says that if œï ‚â°·µí œà, then proving œï suffices to prove œà.
(Similar to the \textsf{subst} rule in Agda.)

\begin{code}
_ : œï ‚â°·µí œà  ‚Üí  ùí´ ‚ä¢·µí œï  ‚Üí  ùí´ ‚ä¢·µí œà
_ = subst·µí
\end{code}

The \textsf{fixpoint}·µí rule says that a recursive predicate is
equivalent to its unfolding.

\begin{code}
_ : ‚àÄ{A} (S·µÉ : A ‚Üí Set·µí (A ‚à∑ Œì) (Later ‚à∑ Œî)) (a : A)
     ‚Üí (Œº·µí S·µÉ) a ‚â°·µí let·µí (Œº·µí S·µÉ) (S·µÉ a)
_ = fixpoint·µí
\end{code}

\noindent For example, we have the following equivalence between
\textsf{Even}‚Å∞ and its unfolding.

\begin{code}
_ : ‚àÄ n ‚Üí Even‚Å∞ n ‚â°·µí (n ‚â° zero)·µí ‚äé·µí (‚àÉ·µí[ m ] (n ‚â° 2 + m)·µí √ó·µí ‚ñ∑·µí (Even‚Å∞ m))
_ = Œª n ‚Üí fixpoint·µí Even·µí n
\end{code}



