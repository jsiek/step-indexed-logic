{-# OPTIONS --without-K --prop #-}

{-

 Logic with Gas
 It's upward closed instead of downward closed.

-}

open import Data.Empty using (‚ä•)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat using (‚Ñï; zero; suc)
--open import Data.Product using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£; ‚àÉ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Unit.Polymorphic renaming (‚ä§ to top·µñ; tt to tt·µñ)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl)

open import PropLib renaming (_√ó_ to _√ó‚Çö_; _,_ to _,‚Çö_; ‚ä• to ‚ä•‚Çö)
--using (_<_; z‚â§s; Œ£; Œ£-syntax‚Çö)
open import EquivalenceRelation using (EquivalenceRelation; _‚áî_; ‚©¶-refl; ‚©¶-sym; ‚©¶-trans)
open import RawSetO
open import Approx
open import Iteration
open import Variables
open import Env
open import StrongInduction

module SetG where
abstract

  record Set·µç (Œì : Context) (Œî : Times Œì) : Set‚ÇÅ where
    field
      # : RecEnv Œì ‚Üí Set‚Çí
      up : ‚àÄ Œ¥ ‚Üí upClosed·µà Œ¥ ‚Üí upClosed (# Œ¥)
      
open Set·µç public

abstract

  ‚ñ∑·µç : ‚àÄ{Œì}{Œî : Times Œì}
     ‚Üí Set·µç Œì Œî
       -----------------
     ‚Üí Set·µç Œì (laters Œì)
  ‚ñ∑·µç {Œì}{Œî} S = record { # = Œª Œ¥ k ‚Üí Œ£[ j ‚àà ‚Ñï ] j < k √ó‚Çö (# S) Œ¥ j
                       ; up = {!!}}

  _·µç : ‚àÄ{Œì} ‚Üí Set ‚Üí Set·µç Œì (laters Œì)
  p ·µç = record { # = (Œª Œ¥ k ‚Üí Squash p) ; up = Œª Œ¥ _ n z k _ ‚Üí z }

  ‚ä•·µç : ‚àÄ{Œì} ‚Üí Set·µç Œì (laters Œì)
  ‚ä•·µç = ‚ä• ·µç

  ‚ä§·µç : ‚àÄ{Œì} ‚Üí Set·µç Œì (laters Œì)
  ‚ä§·µç = record { # = (Œª Œ¥ k ‚Üí ‚ä§) ; up = Œª Œ¥ _ n _ k _ ‚Üí tt }

  infixr 7 _√ó·µç_
  _√ó·µç_ : ‚àÄ{Œì}{Œî‚ÇÅ Œî‚ÇÇ : Times Œì}
     ‚Üí Set·µç Œì Œî‚ÇÅ
     ‚Üí Set·µç Œì Œî‚ÇÇ
       ------------------------
     ‚Üí Set·µç Œì (combine Œî‚ÇÅ Œî‚ÇÇ)
  S √ó·µç T = record { # = (Œª Œ¥ k ‚Üí # S Œ¥ k √ó‚Çö # T Œ¥ k) ; up = {!!} }

private variable œï œï‚Ä≤ œà œà‚Ä≤ √æ : Set·µç [] []
private variable ùí´ : List (Set·µç [] [])

abstract
  Œ†·µç : List (Set·µç [] []) ‚Üí Set·µç [] []
  Œ†·µç [] = ‚ä§·µç
  Œ†·µç (P ‚à∑ ùí´) = P √ó·µç Œ†·µç ùí´ 

  upClosed-Œ†·µç : (ùí´ : List (Set·µç [] [])) ‚Üí upClosed (# (Œ†·µç ùí´) tt·µñ)
  upClosed-Œ†·µç [] = Œª n _ k _ ‚Üí tt
  upClosed-Œ†·µç (œï ‚à∑ ùí´) n (œïn ,‚Çö ‚ä®ùí´n) k k‚â§n =
    up œï tt·µñ tt n œïn k k‚â§n ,‚Çö (upClosed-Œ†·µç ùí´ n ‚ä®ùí´n k k‚â§n) -- 

  infix 1 _‚ä¢·µç_
  _‚ä¢·µç_ : List (Set·µç [] []) ‚Üí Set·µç [] [] ‚Üí Prop
  ùí´ ‚ä¢·µç P = ‚àÄ n ‚Üí # (Œ†·µç ùí´) tt·µñ n ‚Üí (Œ£[ k ‚àà ‚Ñï ] (# P tt·µñ k))

  ‚ñ∑E : ‚àÄ{ùí´}{œï} ‚Üí ùí´ ‚ä¢·µç ‚ñ∑·µç œï ‚Üí ùí´ ‚ä¢·µç œï
  ‚ñ∑E ‚ñ∑œï k ùí´k =
     match (‚ñ∑œï k ùí´k) Œª i œïsi ‚Üí (suc i) ,‚Çö {!!}

  mono·µç : ‚àÄ{ùí´}{œï} ‚Üí ùí´ ‚ä¢·µç œï  ‚Üí  ùí´ ‚ä¢·µç  ‚ñ∑·µç œï
  mono·µç {ùí´}{œï} ‚ä¢œï k ùí´k =
      match (‚ä¢œï k ùí´k) Œª j œïj ‚Üí
      j ,‚Çö {!!}

  lob·µç : (‚ñ∑·µç œï) ‚à∑ ùí´ ‚ä¢·µç œï  ‚Üí  ùí´ ‚ä¢·µç œï
  lob·µç {œï}{ùí´} ‚ñ∑œï‚ä¢œï k ùí´k = {!!}
    where
    aux : ‚àÄ (k : ‚Ñï) ‚Üí # (Œ†·µç ùí´) tt·µñ k ‚Üí (‚ñ∑·µç œï ‚à∑ ùí´ ‚ä¢·µç œï) ‚Üí Œ£[ j ‚àà ‚Ñï ] (# œï tt·µñ j)
    aux = strong-induction si
      where
      si : (n : ‚Ñï) ‚Üí ((i : ‚Ñï) ‚Üí i < n ‚Üí # (Œ†·µç ùí´) tt·µñ i ‚Üí ‚ñ∑·µç œï ‚à∑ ùí´ ‚ä¢·µç œï ‚Üí Œ£-syntax‚Çö ‚Ñï (# œï tt·µñ))
          ‚Üí # (Œ†·µç ùí´) tt·µñ n
          ‚Üí ‚ñ∑·µç œï ‚à∑ ùí´ ‚ä¢·µç œï ‚Üí Œ£[ j ‚àà ‚Ñï ] (# œï tt·µñ j)
      si n IH ùí´n ‚ñ∑œï‚ä¢œï =
        match (IH {!!} {!!} {!!} ‚ñ∑œï‚ä¢œï) Œª i œïi ‚Üí 
        {!!}


{-      
      let xx = step (k ,‚Çö (({!!} ,‚Çö ({!!} ,‚Çö {!!})) ,‚Çö ùí´k)) in
      xx
-}
