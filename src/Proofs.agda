{-# OPTIONS --without-K --rewriting --prop --allow-unsolved-metas #-}

module Proofs where

open import Agda.Primitive using (lzero; lsuc)
open import Data.List using (List; []; _Рѕи_)
open import Data.Nat
   using (РёЋ; zero; suc; _+_; _РѕИ_)
open import Data.Product
   renaming (_,_ to _,рхЃ_) using ()
open import Data.Unit.Polymorphic renaming (Ріц to topрхќ; tt to ttрхќ)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_РЅА_; _РЅб_; refl; sym; trans; cong; congРѓѓ; cong-app; subst)
open import Relation.Nullary using (┬г_)
open import Function using (id; _Рѕў_)
open import Level using (Lift)

open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite

open import EquivalenceRelation public

open import PropLib
open import StrongInduction
open import Variables public
open import RawSetO
open import Approx
open import Iteration
open import SetO public
open import Fixpoint
open import Membership
open import Later
open import RecPred
open import StepIndexedLogic2

private variable ¤Ћ ¤ЋРђ▓ ¤ѕ ¤ѕРђ▓ ├Й : SetрхЈ
private variable ­ЮњФ : List SetрхЈ
private variable p : Prop
private variable A B C : Set
private variable ╬Њ : Context
private variable ╬ћ ╬ћРѓЂ ╬ћРѓѓ : Times ╬Њ

{---------------------- Proof Theory for Step Indexed Logic -------------------}

╬архЈ : List SetрхЈ Рєњ SetрхЈ
╬архЈ [] = Ріцрхњ
╬архЈ (P Рѕи ­ЮњФ) = P ├Ќрхњ ╬архЈ ­ЮњФ 

abstract
  infix 1 _Рібрхњ_
  _Рібрхњ_ : List SetрхЈ Рєњ SetрхЈ Рєњ Prop
  ­ЮњФ Рібрхњ P = Рѕђ n Рєњ # (╬архЈ ­ЮњФ) ttрхќ n Рєњ # P ttрхќ n

  РібрхњI : Рѕђ{­ЮњФ}{P}
     Рєњ (Рѕђ n Рєњ # (╬архЈ ­ЮњФ) ttрхќ n Рєњ # P ttрхќ n)
     Рєњ ­ЮњФ Рібрхњ P
  РібрхњI ­ЮњФРєњP = ­ЮњФРєњP

  РібрхњE : Рѕђ{­ЮњФ}{P}
     Рєњ ­ЮњФ Рібрхњ P
     Рєњ (Рѕђ n Рєњ # (╬архЈ ­ЮњФ) ttрхќ n Рєњ # P ttрхќ n)
  РібрхњE ­ЮњФРібP = ­ЮњФРібP

abstract
  ttрхњ : ­ЮњФ Рібрхњ Ріцрхњ
  ttрхњ = РібрхњI ╬╗ n _ Рєњ tt

abstract
  РіЦ-elimрхњ : ­ЮњФ Рібрхњ РіЦрхњ Рєњ (¤Ћ : SetрхЈ) Рєњ ­ЮњФ Рібрхњ ¤Ћ
  РіЦ-elimрхњ РібРіЦ ¤Ћ n Ріе­ЮњФsn = РіЦ-elim (РібРіЦ n Ріе­ЮњФsn)

  РіЦРЄњРіЦрхњ : РіЦ{lzero} Рєњ ­ЮњФ Рібрхњ РіЦрхњ
  РіЦРЄњРіЦрхњ ()

  РіЦрхњРЄњРіЦ : [] Рібрхњ РіЦрхњ Рєњ РіЦ{lzero}
  РіЦрхњРЄњРіЦ РібРіЦ = РібрхњE{[]}{РіЦрхњ} РібРіЦ 1 tt

abstract
  pureрхњI : Рѕђ{p : Prop} Рєњ p Рєњ ­ЮњФ Рібрхњ p рхњ
  pureрхњI s n Ріе­ЮњФn = s

  pureрхњE : ­ЮњФ Рібрхњ p рхњ  Рєњ  (p Рєњ ­ЮњФ Рібрхњ ├Й)  Рєњ  ­ЮњФ Рібрхњ ├Й
  pureрхњE {­ЮњФ} {p} {R} Рібp pРєњРібR n ­ЮњФn = pРєњРібR (Рібp n ­ЮњФn) n ­ЮњФn

pureрхњE-syntax = pureрхњE
infix 1 pureрхњE-syntax
syntax pureрхњE-syntax pрхњ (╬╗ p Рєњ Ріб├Й) = let-pureрхњ[ p ] pрхњ within Ріб├Й

abstract
  _,рхњ_ : ­ЮњФ Рібрхњ ¤Ћ  Рєњ  ­ЮњФ Рібрхњ ¤ѕ  Рєњ  ­ЮњФ Рібрхњ ¤Ћ ├Ќрхњ ¤ѕ
  (­ЮњФРіб¤Ћ ,рхњ ­ЮњФРіб¤ѕ) n Ріе­ЮњФn = ­ЮњФРіб¤Ћ n Ріе­ЮњФn , ­ЮњФРіб¤ѕ n Ріе­ЮњФn

  projРѓЂрхњ : Рѕђ{­ЮњФ : List SetрхЈ }{P Q : SetрхЈ}
    Рєњ ­ЮњФ Рібрхњ P ├Ќрхњ Q
      ------------
    Рєњ ­ЮњФ Рібрхњ P
  projРѓЂрхњ ­ЮњФРібP├ЌQ n Ріе­ЮњФn = projРѓЂ (­ЮњФРібP├ЌQ n Ріе­ЮњФn)

  projРѓѓрхњ : ­ЮњФ Рібрхњ ¤Ћ ├Ќрхњ ¤ѕ  Рєњ  ­ЮњФ Рібрхњ ¤ѕ
  projРѓѓрхњ ­ЮњФРіб¤Ћ├Ќ¤ѕ n Ріе­ЮњФn = projРѓѓ (­ЮњФРіб¤Ћ├Ќ¤ѕ n Ріе­ЮњФn)

abstract
  injРѓЂрхњ : ­ЮњФ Рібрхњ ¤Ћ Рєњ ­ЮњФ Рібрхњ ¤Ћ Ріјрхњ ¤ѕ
  injРѓЂрхњ ­ЮњФРіб¤Ћ n Ріе­ЮњФn = injРѓЂ (­ЮњФРіб¤Ћ n Ріе­ЮњФn)

  injРѓѓрхњ : ­ЮњФ Рібрхњ ¤ѕ Рєњ ­ЮњФ Рібрхњ ¤Ћ Ріјрхњ ¤ѕ
  injРѓѓрхњ ­ЮњФРіб¤ѕ n Ріе­ЮњФn = injРѓѓ (­ЮњФРіб¤ѕ n Ріе­ЮњФn)

  caseрхњ : ­ЮњФ Рібрхњ ¤Ћ Ріјрхњ ¤ѕ  Рєњ  ¤Ћ Рѕи ­ЮњФ Рібрхњ ├Й  Рєњ  ¤ѕ Рѕи ­ЮњФ Рібрхњ ├Й  Рєњ  ­ЮњФ Рібрхњ ├Й
  caseрхњ ­ЮњФРіб¤ЋРіј¤ѕ ¤ЋРѕи­ЮњФРіб├Й ¤ѕРѕи­ЮњФРіб├Й n Ріе­ЮњФn
      with ­ЮњФРіб¤ЋРіј¤ѕ n Ріе­ЮњФn
  ... | injРѓЂ ¤Ћn = ¤ЋРѕи­ЮњФРіб├Й n (¤Ћn , Ріе­ЮњФn)
  ... | injРѓѓ ¤ѕn = ¤ѕРѕи­ЮњФРіб├Й n (¤ѕn , Ріе­ЮњФn)

abstract
  downClosed-╬архЈ : (­ЮњФ : List SetрхЈ) Рєњ downClosed (# (╬архЈ ­ЮњФ) ttрхќ)
  downClosed-╬архЈ [] = ╬╗ n _ k _ Рєњ tt
  downClosed-╬архЈ (¤Ћ Рѕи ­ЮњФ) n (¤Ћn , Ріе­ЮњФn) k kРЅцn =
    down ¤Ћ ttрхќ tt n ¤Ћn k kРЅцn , (downClosed-╬архЈ ­ЮњФ n Ріе­ЮњФn k kРЅцn) -- 

abstract
  РєњрхњI : ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤ѕ  Рєњ  ­ЮњФ Рібрхњ ¤Ћ Рєњрхњ ¤ѕ
  РєњрхњI {­ЮњФ = ­ЮњФ} ¤ЋРѕи­ЮњФРіб¤ѕ n Ріе­ЮњФn j jРЅцn ¤Ћj = ¤ЋРѕи­ЮњФРіб¤ѕ j (¤Ћj , downClosed-╬архЈ ­ЮњФ n Ріе­ЮњФn j jРЅцn)

  РєњрхњE : ­ЮњФ Рібрхњ ¤Ћ Рєњрхњ ¤ѕ  Рєњ  ­ЮњФ Рібрхњ ¤Ћ  Рєњ  ­ЮњФ Рібрхњ ¤ѕ
  РєњрхњE {­ЮњФ} ­ЮњФРіб¤ЋРєњ¤ѕ ­ЮњФРіб¤Ћ n Ріе­ЮњФn = let ¤Ћn = ­ЮњФРіб¤Ћ n Ріе­ЮњФn in ­ЮњФРіб¤ЋРєњ¤ѕ n Ріе­ЮњФn n (РЅц-refl{n}) ¤Ћn

abstract
  monoрхњ : ­ЮњФ Рібрхњ ¤Ћ  Рєњ  ­ЮњФ Рібрхњ  Рќирхњ ¤Ћ
  monoрхњ {­ЮњФ} Ріб¤Ћ k Ріе­ЮњФk j j<k =
        Ріб¤Ћ j (downClosed-╬архЈ ­ЮњФ k Ріе­ЮњФk j (РЅц-trans{j}{suc j}{k} (nРЅц1+n j) j<k)) 

{-
  monoрхњ {­ЮњФ}{¤Ћ} Ріб¤Ћ zero Ріе­ЮњФn = tt
  monoрхњ {­ЮњФ}{¤Ћ} Ріб¤Ћ (suc n) Ріе­ЮњФn = Ріб¤Ћ n (downClosed-╬архЈ ­ЮњФ (suc n) Ріе­ЮњФn n (nРЅц1+n n))
-}

abstract
  lobрхњ : (Рќирхњ ¤Ћ) Рѕи ­ЮњФ Рібрхњ ¤Ћ  Рєњ  ­ЮњФ Рібрхњ ¤Ћ
  lobрхњ {¤Ћ}{­ЮњФ} step k Ріе­ЮњФk = aux k step Ріе­ЮњФk
    where
    aux : Рѕђ k Рєњ Рќирхњ ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤Ћ Рєњ # (╬архЈ ­ЮњФ) ttрхќ k Рєњ # ¤Ћ ttрхќ k
    aux = strong-induction si
     where
      si : Рѕђ n Рєњ (Рѕђ i Рєњ i < n Рєњ Рќирхњ ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤Ћ Рєњ # (╬архЈ ­ЮњФ) ttрхќ i Рєњ # ¤Ћ ttрхќ i)
         Рєњ  Рќирхњ ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤Ћ  Рєњ  # (╬архЈ ­ЮњФ) ttрхќ n Рєњ # ¤Ћ ttрхќ n
      si n IH step Pn =
        let Ріе­ЮњФn = downClosed-╬архЈ ­ЮњФ n Pn n (РЅц-refl{n}) in
        step n ((╬╗ j j<sucn Рєњ IH j j<sucn step (downClosed-╬архЈ ­ЮњФ n Pn j (РЅц-trans{j}{suc j}{n} (nРЅц1+n j) j<sucn))) , Pn)

abstract
  substрхњ : ¤Ћ РЅАрхњ ¤ѕ  Рєњ  ­ЮњФ Рібрхњ ¤Ћ  Рєњ  ­ЮњФ Рібрхњ ¤ѕ
  substрхњ ¤Ћ=¤ѕ ­ЮњФРіб¤Ћ n Ріе­ЮњФn = РЄћ-to ((РЅАрхњРЄњРЅАРѓњ ¤Ћ=¤ѕ) n) (­ЮњФРіб¤Ћ n Ріе­ЮњФn)

abstract
  ╬Џрхњ : {¤ЋрхЃ : A Рєњ SetрхЈ} Рєњ (Рѕђ a Рєњ ­ЮњФ Рібрхњ ¤ЋрхЃ a)  Рєњ  ­ЮњФ Рібрхњ Рѕђрхњ ¤ЋрхЃ
  ╬Џрхњ Рѕђ¤ЋрхЃa n Ріе­ЮњФn a = Рѕђ¤ЋрхЃa a n Ріе­ЮњФn

╬Џрхњ-syntax = ╬Џрхњ
infix 1 ╬Џрхњ-syntax
syntax ╬Џрхњ-syntax (╬╗ a Рєњ Ріб¤ЋрхЃa) = ╬Џрхњ[ a ] Ріб¤ЋрхЃa

abstract
  РѕђрхњE : Рѕђ{¤ЋрхЃ : A Рєњ SetрхЈ} Рєњ ­ЮњФ Рібрхњ Рѕђрхњ ¤ЋрхЃ  Рєњ  (a : A)  Рєњ  ­ЮњФ Рібрхњ ¤ЋрхЃ a
  РѕђрхњE РібРѕђ¤ЋрхЃ a n Ріе­ЮњФn = РібРѕђ¤ЋрхЃ n Ріе­ЮњФn a

  РѕЃрхњI : Рѕђ{¤ЋрхЃ : A Рєњ SetрхЈ}{{_ : Inhabited A}} Рєњ (a : A)  Рєњ  ­ЮњФ Рібрхњ ¤ЋрхЃ a  Рєњ  ­ЮњФ Рібрхњ РѕЃрхњ ¤ЋрхЃ
  РѕЃрхњI a Ріб¤ЋрхЃa n Ріе­ЮњФn = a , (Ріб¤ЋрхЃa n Ріе­ЮњФn)

  РѕЃрхњE : Рѕђ{¤ЋрхЃ : A Рєњ SetрхЈ}{├Й : SetрхЈ}{{_ : Inhabited A}}
     Рєњ ­ЮњФ Рібрхњ РѕЃрхњ ¤ЋрхЃ  Рєњ  (Рѕђ a Рєњ ¤ЋрхЃ a Рѕи ­ЮњФ Рібрхњ ├Й)  Рєњ  ­ЮњФ Рібрхњ ├Й
  РѕЃрхњE РібРѕЃ¤ЋрхЃ cont n Ріе­ЮњФn
      with РібРѕЃ¤ЋрхЃ n Ріе­ЮњФn
  ... | (a , ¤ЋрхЃasn) = cont a n (¤ЋрхЃasn , Ріе­ЮњФn)

abstract
  Zрхњ : ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤Ћ
  Zрхњ n (¤Ћn , Ріе­ЮњФn) = ¤Ћn

abstract
  Sрхњ : ­ЮњФ Рібрхњ ¤ѕ  Рєњ  ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤ѕ
  Sрхњ ­ЮњФРіб¤ѕ n (¤Ћn , Ріе­ЮњФn) = ­ЮњФРіб¤ѕ n Ріе­ЮњФn


╬╗рхњ : Рѕђ ¤Ћ Рєњ (¤Ћ Рѕи ­ЮњФ Рібрхњ ¤Ћ Рєњ ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤ѕ) Рєњ ­ЮњФ Рібрхњ ¤Ћ Рєњрхњ ¤ѕ
╬╗рхњ ¤Ћ f = РєњрхњI{¤Ћ = ¤Ћ} (f Zрхњ)

╬╗рхњ-syntax : Рѕђ ¤Ћ Рєњ (¤Ћ Рѕи ­ЮњФ Рібрхњ ¤Ћ Рєњ ¤Ћ Рѕи ­ЮњФ Рібрхњ ¤ѕ) Рєњ ­ЮњФ Рібрхњ ¤Ћ Рєњрхњ ¤ѕ
╬╗рхњ-syntax = ╬╗рхњ
infix 1 ╬╗рхњ-syntax
syntax ╬╗рхњ-syntax ¤Ћ (╬╗ Ріб¤Ћ Рєњ Ріб¤ѕ) = ╬╗рхњ[ Ріб¤Ћ Рдѓ ¤Ћ ] Ріб¤ѕ

unpackрхњ : Рѕђ{¤ЋрхЃ : A Рєњ SetрхЈ}{├Й : SetрхЈ}{{_ : Inhabited A}}
     Рєњ ­ЮњФ Рібрхњ РѕЃрхњ ¤ЋрхЃ  Рєњ  (Рѕђ a Рєњ ¤ЋрхЃ a Рѕи ­ЮњФ Рібрхњ ¤ЋрхЃ a Рєњ ¤ЋрхЃ a Рѕи ­ЮњФ Рібрхњ ├Й)  Рєњ  ­ЮњФ Рібрхњ ├Й
unpackрхњ РѕЃ¤Ћ cont = РѕЃрхњE РѕЃ¤Ћ ╬╗ a Рєњ cont a Zрхњ

foldрхњ : Рѕђ{­ЮњФ} (SрхЃ : A Рєњ Setрхњ (A Рѕи []) (Later Рѕи [])) (a : A) Рєњ  ­ЮњФ Рібрхњ letрхњ (╬╝рхњ SрхЃ) (SрхЃ a)  Рєњ  ­ЮњФ Рібрхњ ╬╝рхњ SрхЃ a
foldрхњ SрхЃ a SрхЃ[╬╝SрхЃ] = substрхњ (РЅАрхњ-sym (fixpointрхњ SрхЃ a)) SрхЃ[╬╝SрхЃ]

unfoldрхњ : Рѕђ{­ЮњФ} (SрхЃ : A Рєњ Setрхњ (A Рѕи []) (Later Рѕи [])) (a : A) Рєњ  ­ЮњФ Рібрхњ ╬╝рхњ SрхЃ a  Рєњ  ­ЮњФ Рібрхњ letрхњ (╬╝рхњ SрхЃ) (SрхЃ a)
unfoldрхњ SрхЃ a ╬╝SрхЃ = substрхњ (fixpointрхњ SрхЃ a) ╬╝SрхЃ

abstract
  Рќи├Ќ : ­ЮњФ Рібрхњ (Рќирхњ (¤Ћ ├Ќрхњ ¤ѕ))  Рєњ  ­ЮњФ Рібрхњ (Рќирхњ ¤Ћ) ├Ќрхњ (Рќирхњ ¤ѕ)
  Рќи├Ќ Рќи¤Ћ├Ќ¤ѕ n ­ЮњФn = (╬╗ j j<n Рєњ projРѓЂ (Рќи¤Ћ├Ќ¤ѕ n ­ЮњФn j j<n))
                , (╬╗ j j<n Рєњ projРѓѓ (Рќи¤Ћ├Ќ¤ѕ n ­ЮњФn j j<n))

  РќиРіј : ­ЮњФ Рібрхњ (Рќирхњ (¤Ћ Ріјрхњ ¤ѕ))  Рєњ  ­ЮњФ Рібрхњ (Рќирхњ ¤Ћ) Ріјрхњ (Рќирхњ ¤ѕ)
  РќиРіј Рќи¤ЋРіј¤ѕ zero ­ЮњФn = injРѓЂ ╬╗ j ()
  РќиРіј {­ЮњФ}{¤Ћ}{¤ѕ} Рќи¤ЋРіј¤ѕ (suc n) ­ЮњФn 
      with Рќи¤ЋРіј¤ѕ (suc n) ­ЮњФn n (РЅц-refl{n})
  ... | injРѓЂ ¤Ћn = injРѓЂ ╬╗ { j jРЅцn Рєњ down ¤Ћ ttрхќ tt n ¤Ћn j jРЅцn }
  ... | injРѓѓ ¤ѕn = injРѓѓ ╬╗ { j jРЅцn Рєњ down ¤ѕ ttрхќ tt n ¤ѕn j jРЅцn }

  
  РќиРєњ : ­ЮњФ Рібрхњ (Рќирхњ (¤Ћ Рєњрхњ ¤ѕ))  Рєњ  ­ЮњФ Рібрхњ (Рќирхњ ¤Ћ) Рєњрхњ (Рќирхњ ¤ѕ)
  РќиРєњ Рќи¤ЋРєњ¤ѕ n Ріе­ЮњФn i iРЅцn Рќи¤Ћi j j<si = 
     let ¤ЋjРєњ¤ѕj = Рќи¤ЋРєњ¤ѕ n Ріе­ЮњФn j (РЅц-trans{suc j}{i}{n} j<si iРЅцn) j (РЅц-refl{j}) in
     ¤ЋjРєњ¤ѕj (Рќи¤Ћi j j<si)

  РќиРѕђ : Рѕђ{¤ЋрхЃ : A Рєњ SetрхЈ} Рєњ ­ЮњФ Рібрхњ Рќирхњ (Рѕђрхњ ¤ЋрхЃ)  Рєњ  ­ЮњФ Рібрхњ (Рѕђрхњ ╬╗ a Рєњ Рќирхњ (¤ЋрхЃ a))
  РќиРѕђ ­ЮњФРібРќиРѕђ¤ЋрхЃ n Ріе­ЮњФsn a j j< = ­ЮњФРібРќиРѕђ¤ЋрхЃ n Ріе­ЮњФsn j j< a

  РќиРѕЃ : Рѕђ{¤ЋрхЃ : A Рєњ SetрхЈ}{{_ : Inhabited A}} Рєњ ­ЮњФ Рібрхњ Рќирхњ (РѕЃрхњ ¤ЋрхЃ)  Рєњ  ­ЮњФ Рібрхњ (РѕЃрхњ ╬╗ a Рєњ Рќирхњ (¤ЋрхЃ a))
  РќиРѕЃ ­ЮњФРібРќиРѕЃ¤ЋрхЃ zero Ріе­ЮњФk = elt , (╬╗ j ())
  РќиРѕЃ {¤ЋрхЃ = ¤ЋрхЃ} ­ЮњФРібРќиРѕЃ¤ЋрхЃ (suc k) Ріе­ЮњФsk 
      with ­ЮњФРібРќиРѕЃ¤ЋрхЃ (suc k) Ріе­ЮњФsk k (РЅц-refl{k})
  ... | a , ¤Ћk =
      a , ╬╗ {j jРЅцk Рєњ
             let ¤Ћj = down (¤ЋрхЃ a) ttрхќ tt k ¤Ћk j jРЅцk in
             down (¤ЋрхЃ a) ttрхќ tt j ¤Ћj j (РЅц-refl{j})}

  Рќиpureрхњ : [] Рібрхњ Рќирхњ (p рхњ) Рєњ [] Рібрхњ p рхњ
  Рќиpureрхњ РібРќи k ttрхќ = РібРќи (suc k) tt k (sРЅцs{k} (РЅц-refl{k})) 

  РќиРєњРќи : Рѕђ{­ЮњФ}{P Q : SetрхЈ}
     Рєњ ­ЮњФ Рібрхњ Рќирхњ P
     Рєњ P Рѕи ­ЮњФ Рібрхњ Q
       ------------
     Рєњ ­ЮњФ Рібрхњ Рќирхњ Q
  РќиРєњРќи {­ЮњФ}{P}{Q} РќиP PРібQ n Ріе­ЮњФn =
    let РќиQ = РєњрхњE{­ЮњФ}{Рќирхњ P}{Рќирхњ Q}
                (РќиРєњ{­ЮњФ}{P}{Q}
                    (monoрхњ{­ЮњФ}{P Рєњрхњ Q} (РєњрхњI{P}{­ЮњФ}{Q} PРібQ))) РќиP in
    РќиQ n Ріе­ЮњФn

Рѕђрхњ-syntax : Рѕђ{╬Њ}{╬ћ : Times ╬Њ}{A : Set} Рєњ (A Рєњ Setрхњ ╬Њ ╬ћ) Рєњ Setрхњ ╬Њ ╬ћ
Рѕђрхњ-syntax = Рѕђрхњ
infix 1 Рѕђрхњ-syntax
syntax Рѕђрхњ-syntax (╬╗ x Рєњ P) = Рѕђрхњ[ x ] P

Рѕђрхњ-annot-syntax : Рѕђ{╬Њ}{╬ћ : Times ╬Њ} Рєњ Рѕђ (A : Set) Рєњ (A Рєњ Setрхњ ╬Њ ╬ћ) Рєњ Setрхњ ╬Њ ╬ћ
Рѕђрхњ-annot-syntax A = Рѕђрхњ {A = A}
infix 2 Рѕђрхњ-annot-syntax
syntax Рѕђрхњ-annot-syntax A (╬╗ x Рєњ P) = Рѕђрхњ[ x Рдѓ A ] P

РѕЃрхњ-syntax : Рѕђ{╬Њ}{╬ћ : Times ╬Њ}{A : Set}{{_ : Inhabited A}} Рєњ (A Рєњ Setрхњ ╬Њ ╬ћ) Рєњ Setрхњ ╬Њ ╬ћ
РѕЃрхњ-syntax = РѕЃрхњ
infix 2 РѕЃрхњ-syntax
syntax РѕЃрхњ-syntax (╬╗ x Рєњ P) = РѕЃрхњ[ x ] P

abstract
  РЌЄРЌЄРЄњРЌЄ :  ­ЮњФ Рібрхњ РЌЄрхњ (РЌЄрхњ ¤Ћ)  Рєњ  ­ЮњФ Рібрхњ РЌЄрхњ ¤Ћ
  РЌЄРЌЄРЄњРЌЄ РЌЄРЌЄ¤Ћ n ­ЮњФn
      with РЌЄРЌЄ¤Ћ n ­ЮњФn
  ... | j , sjРЅцn , k , skРЅцj , ¤Ћk = k , (РЅц-trans{suc k}{j}{n} skРЅцj (РЅц-trans{j}{suc j}{n} (nРЅц1+n j) sjРЅцn)  , ¤Ћk)

{-
  РќиРЌЄРЄњРЌЄ :  ­ЮњФ Рібрхњ Рќирхњ (РЌЄрхњ ¤Ћ)  Рєњ  ­ЮњФ Рібрхњ РЌЄрхњ ¤Ћ
  РќиРЌЄРЄњРЌЄ РќиРЌЄ¤Ћ zero ­ЮњФz =
      let xx = РќиРЌЄ¤Ћ {!!} {!!}
      in {!!}
  РќиРЌЄРЄњРЌЄ РќиРЌЄ¤Ћ (suc n) ­ЮњФsn = {!!} , ({!!} , {!!})
-}

{-  
    let xx = РќиРќи¤Ћ n ­ЮњФn {!!} {!!} j {!!} in
    xx


      {!!} , {!!} , {!!}
-}

